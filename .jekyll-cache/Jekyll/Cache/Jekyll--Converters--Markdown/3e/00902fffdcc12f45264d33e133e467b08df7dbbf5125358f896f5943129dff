I"<p>Esta es una gu√≠a paso a paso para el <a href="https://github.com/torresmateo/parser-hesaka">parser simple</a> que escrib√≠ para parsear <a href="https://www.asuncion.gov.py/hesaka">PDFs intencionalmente ofuscados</a> por la Municipalidad de Asunci√≥n con el √∫nico objetivo de minimizar la transparencia de las gestiones.</p>

<h2 id="qu√©-software-instalar">Qu√© software instalar:</h2>

<p>El parser es un parser de texto, y no un parser de im√°genes. Para obtener el texto, necesitamos instalar dos herramientas gratuitas que nos sirven para un proceso de dos pasos:</p>

<ol>
  <li>Transformar el PDF a im√°genes (una im√°gen por p√°gina)</li>
  <li>Detectar el texto en las im√°genes, manteniendo los espacios entre las columnas.</li>
</ol>

<p>El primer paso lo hacemos con el comando <a href="https://www.xpdfreader.com/pdftopng-man.html">pdftopng</a>, para lo cual debemos instalar <a href="https://www.xpdfreader.com/download.html">XpdfReader</a> (o alguna herramienta que pueda transformar pdf a im√°genes <a href="">hay</a> <a href="">muchas</a> <a href="">opciones</a>. Instrucciones para instalr XpdfReader (en ingl√©s) en <a href="">este link</a>.</p>

<p>El segundo paso lo hacemos con un software que reconoce caracteres en im√°genes. Esto se conoce como OCR, del ingl√©s <em>Optical Character Recognition</em>. Yo eleg√≠ usar <a href="https://github.com/tesseract-ocr/tesseract">tesseract</a>, ya que es gratis y open source, pero existen [muchas alternativas] para este prop√≥sito. Lo √∫nico que necesitamos es transformar las im√°genes a texto.</p>

<h2 id="paso-1--transoformar-pdf-a-varias-im√°genes">Paso 1 ‚Äì Transoformar pdf a varias im√°genes</h2>

<p>Usando <code class="language-plaintext highlighter-rouge">pdftopng</code> el comando a correr (en una terminal) es el siguiente:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">~$</span><span class="w"> </span>pdftopng <span class="nt">-r</span> 600 Febrero_2022.pdf febrero-2022
</code></pre></div></div>

<p>Este comando generar√° una im√°gen por cada p√°gina a 600 <a href="https://es.wikipedia.org/wiki/Puntos_por_pulgada">DPI</a>, y las va a nombrar <code class="language-plaintext highlighter-rouge">febrero-2022-000001.png</code>, <code class="language-plaintext highlighter-rouge">febrero-2022-000002.png</code>, etc. Desde luego, el nombre del PDF va a cambiar dependiendo del PDF que uno quiera analizar, y lo mismo con el √∫ltimo argumento.</p>

<blockquote>
  <p>Los archivos de la Municipalidad tienen cientos de p√°ginas, y 600 DPI es una imagen de alta calidad, por lo tanto el comando puede tardar varios minutos, dependiendo de la capacidad de la computadora.</p>
</blockquote>

<p>Una vez que el comando termine, estamos listos para reconocer el texto usando tesseract.</p>

<h2 id="paso-2--reconocimiento-de-caracteres">Paso 2 ‚Äì Reconocimiento de caracteres</h2>

<p>Como estamos lidiando con cientos de im√°genes, antes de correr tesseract en si, es conveniente crear primero un archivo para indicarle a tesseract los archivos que debe procesar. Para esto, corremos el siguiente comando en la carpeta donde corrimos <code class="language-plaintext highlighter-rouge">pdftopng</code>:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">~$</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-d</span> <span class="nv">$PWD</span>/febrero-2022-<span class="k">*</span>.png <span class="o">&gt;</span> tesseract_input.txt
</code></pre></div></div>

<p>Con este comando, estamos indicando a la computadora que liste todas las im√°genes que creamos usando <code class="language-plaintext highlighter-rouge">pdftopng</code>, y que guarde esta lista en el archivo <code class="language-plaintext highlighter-rouge">tesseract_input.txt</code>. Una vez que este archivo exista en la computadora, podemos llamar a tesseract:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">~$</span><span class="w"> </span>tesseract <span class="nt">-l</span> spa tesseract_input.txt febrero-2022 <span class="nt">--psm</span> 6 <span class="nt">-c</span> <span class="nv">preserve_interword_spaces</span><span class="o">=</span>1
</code></pre></div></div>

<p>En este comando le decimos a <code class="language-plaintext highlighter-rouge">tesseract</code> que:</p>
<ul>
  <li>Procese la lista que escribimos en <code class="language-plaintext highlighter-rouge">tesseract_input.txt</code></li>
  <li>Guarde los resultados en <code class="language-plaintext highlighter-rouge">febreto-2022.txt</code> (la extension <code class="language-plaintext highlighter-rouge">.txt</code> se agrega sola)</li>
  <li><code class="language-plaintext highlighter-rouge">--psm 6</code> indica que queremos que la imagen se interprete como un bloque de texto √∫nico (es decir, va a leer cada l√≠nea hasta el final, en lugar de intentar detectar columnas)</li>
  <li><code class="language-plaintext highlighter-rouge">-c preserve_interword_spaces=1</code> indica que queremos mantener la separaci√≥n entre palabras, incluso si eso significa agregar una cantidad anormal de espacios.</li>
</ul>

<blockquote>
  <p>Posiblemente esta sea la parte m√°s lenta del proceso, ya que procesar la im√°genes se hace con un modelo de machine learning que require relativamente mucho poder computacional.</p>
</blockquote>

<h2 id="paso-3--usar-el-parser-para-extraer-los-datos-a-excel">Paso 3 ‚Äì Usar el parser para extraer los datos a excel</h2>

<p>El parser est√° escrito en python, y requiere de que se instalen algunas bibliotecas espec√≠ficas para funcionar. Para instalar las bibliotecas requeridas, en la terminal se debe escribir:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">~$</span><span class="w"> </span>pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div></div>

<blockquote>
  <p>IMPORTANTE: dependiendo de tu experiencia con python puede ser una buena idea crear un entorno virtual primero</p>
</blockquote>

<p>Una vez que las dependencias est√°n instaladas, para exportar un excel</p>

<h2 id="la-estructura-de-las-im√°genes-de-hesaka">La estructura de las im√°genes de Hesaka.</h2>

<p>La estructura de todas las p√°ginas de los archivos de Hesaka se ven como la siguiente im√°gen:
<img src="images/manual-hesaka/screenshot-pdf.png" alt="screenshot-pdf" /></p>

<p>Es decir, tenemos las columnas:</p>

<ul>
  <li>C√©dula (un n√∫mero)</li>
  <li>Nombre</li>
  <li>Relaci√≥n Laboral</li>
  <li>Monto</li>
  <li>Concepto</li>
  <li>Dependencia</li>
  <li>Cargo (opcional)</li>
  <li>A√±o de Ingreso (completa en esta figura, pero a veces no est√° especificado, entonces tambi√©n opcional)</li>
</ul>
:ET